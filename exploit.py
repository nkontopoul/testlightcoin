import os
import ecdsa
import hashlib
import base58
import requests
import time

class LitecoinWallet:
    def __init__(self):
        self.private_key = self.generate_private_key()
        self.public_key = self.generate_public_key(self.private_key)
        self.address = self.generate_address(self.public_key)

    def generate_private_key(self):
        return os.urandom(32).hex()

    def generate_public_key(self, private_key):
        sk = ecdsa.SigningKey.from_string(bytes.fromhex(private_key), curve=ecdsa.SECP256k1)
        vk = sk.verifying_key
        public_key = b'\x04' + vk.to_string()
        return public_key.hex()

    def generate_address(self, public_key):
        sha256_bpk = hashlib.sha256(bytes.fromhex(public_key)).digest()
        ripemd160_bpk = hashlib.new('ripemd160', sha256_bpk).digest()
        network_byte = b'\x30'  # This is 48 in decimal, the Litecoin network byte
        network_bitcoin_public_key = network_byte + ripemd160_bpk
        sha256_nbpk = hashlib.sha256(network_bitcoin_public_key).digest()
        sha256_2_nbpk = hashlib.sha256(sha256_nbpk).digest()
        checksum = sha256_2_nbpk[:4]
        address = base58.b58encode(network_bitcoin_public_key + checksum)
        return address.decode()

    def get_balance(self):
        try:
            response = requests.get(f'https://api.blockcypher.com/v1/ltc/main/addrs/{self.address}/balance')
            if response.status_code == 200:
                balance_info = response.json()
                return balance_info.get('balance', 0)
            else:
                print(f"Error fetching balance: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"Request error: {e}")
            return None

def main():
    while True:
        wallet = LitecoinWallet()
        balance = wallet.get_balance()
        if balance is not None and balance > 0:
            with open("found.txt", "a") as f:
                f.write(f"Private Key: {wallet.private_key}\n")
                f.write(f"Public Key: {wallet.public_key}\n")
                f.write(f"Address: {wallet.address}\n")
                f.write(f"Balance: {balance} satoshis\n")
                f.write("\n")
            print(f"Found wallet with balance: {wallet.address} - {balance} satoshis")
        else:
            print(f"No balance for address: {wallet.address}")
        time.sleep(1)  # Adjust the delay as needed

if __name__ == "__main__":
    main()